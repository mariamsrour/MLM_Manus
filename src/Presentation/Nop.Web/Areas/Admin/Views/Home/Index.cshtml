@model DashboardModel
@inject IPermissionService permissionService
@using Nop.Services.Security
@{
    //page title
    ViewBag.PageTitle = T("Admin.Dashboard").Text;

    var canManageOrders = await permissionService.AuthorizeAsync(StandardPermissionProvider.ManageOrders);
    var canManageCustomers = await permissionService.AuthorizeAsync(StandardPermissionProvider.ManageCustomers);
    var canManageProducts = await permissionService.AuthorizeAsync(StandardPermissionProvider.ManageProducts);
    var canManageReturnRequests = await permissionService.AuthorizeAsync(StandardPermissionProvider.ManageReturnRequests);

    //close configuration steps value
    const string closeCardAttributeName = "CloseConfigurationSteps";
    var closeConfigurationStepsCard = await genericAttributeService.GetAttributeAsync<bool>(await workContext.GetCurrentCustomerAsync(), closeCardAttributeName);

     //active menu item (system name)
    NopHtml.SetActiveMenuItemSystemName("Dashboard");
}

<link rel="stylesheet" href="~/lib_npm/ionicons/css/ionicons.min.css" />
<script src="~/js/admin.table.js" asp-location="Footer"></script>

<div class="content-header">
    <h1>
        @T("Admin.Dashboard")
    </h1>
</div>
<section class="content">
    <div class="container-fluid">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    @if (!closeConfigurationStepsCard)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                @await Html.PartialAsync("_ConfigurationSteps")
                            </div>
                        </div>
                    }

                    @await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.DashboardTop, additionalData = Model })
                    @if (!Model.IsLoggedInAsVendor)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                @await Component.InvokeAsync(typeof(NopCommerceNewsViewComponent))
                            </div>
                        </div>
                    }

                    @await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.DashboardNewsAfter, additionalData = Model })
                    @if (!Model.IsLoggedInAsVendor && canManageOrders && canManageCustomers && canManageProducts && canManageReturnRequests)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                @await Component.InvokeAsync(typeof(CommonStatisticsViewComponent))
                            </div>
                        </div>
                    }
                    @await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.DashboardCommonstatisticsAfter, additionalData = Model })
                    @if (!Model.IsLoggedInAsVendor && (canManageOrders || canManageCustomers))
                    {
                        <div class="row">
                            @if (!Model.IsLoggedInAsVendor && canManageOrders)
                            {
                                <div class="col-md-8">
                                    @await Html.PartialAsync("_OrderStatistics")
                                </div>
                            }
                            @if (!Model.IsLoggedInAsVendor && canManageCustomers)
                            {
                                <div class="col-md-4">
                                    <div class="card card-primary card-outline">
    <div class="card-header with-border">
        <h3 class="card-title">
            <i class="fas fa-shopping-cart"></i>
            Order Status Statistics
        </h3>
                                            <div class="card-body" >

                                                <script src="~/lib_npm/chart.js/chart.umd.min.js"></script>
                                                <canvas id="myDoughnutChart" style="height:300px!important"></canvas>
                                                <script>
                                                    var ctx = document.getElementById('myDoughnutChart').getContext('2d');
                                                    var myDoughnutChart = new Chart(ctx, {
                                                        type: 'doughnut',
                                                        data:
                                                        {

                                                            labels: ['Pending : 3', 'Schedueled : 3', 'Out of delivery : 1', 'Delivered : 3', 'Canceled : 0'],
                                                            datasets: [{
                                                                label: 'Order Status Statistics',
                                                                data: [3, 3, 1,3,0],
                                                                backgroundColor: [
                                                                    'rgb(255, 99, 132)',
                                                                    'rgb(54, 162, 235)',
                                                                    'rgb(255, 205, 86)',
                                                                    'rgba(151, 71, 255, 1)',
                                                                    'rgba(155, 223, 196, 1)'
                                                                ],
                                                                hoverOffset:
                                                                    4
                                                            }]
                                                        }
                                                    });
                                                </script>
                </div>

        </div>
        </div>
                                   

                                </div>
                               @*  <div class="col-md-6">
                                    @await Html.PartialAsync("_CustomerStatistics")
                                </div> *@
                            }
                        </div>
                    }
                  @*   @await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.DashboardCustomerorderchartsAfter, additionalData = Model })
                    @if (!Model.IsLoggedInAsVendor && canManageOrders)
                    {
                        <div class="row">
                            <div class="col-md-8">
                                @await Html.PartialAsync("_OrderAverageReport")
                            </div>
                            <div class="col-md-4">
                                @await Html.PartialAsync("_OrderIncompleteReport")
                            </div>
                        </div>
                    }
                    @await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.DashboardOrderreportsAfter, additionalData = Model })
                    @if (!Model.IsLoggedInAsVendor && (canManageOrders || canManageProducts))
                    {
                        <div class="row">
                            @if (canManageOrders)
                            {
                                <div class="col-md-8">
                                    @await Html.PartialAsync("_LatestOrders")
                                </div>
                            }
                            <div class="col-md-4">
                                @if (canManageProducts)
                                {
                                    @await Html.PartialAsync("_PopularSearchTermsReport")
                                }
                            </div>
                        </div>
                    }
                    *@
                    @await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.DashboardLatestordersSearchtermsAfter, additionalData = Model })
                    @if (canManageOrders)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                @await Html.PartialAsync("_BestsellersBriefReportByQuantity")
                            </div>
                             <div class="col-md-12">
                                @await Html.PartialAsync("_BestSellerCategories")
                            </div>
                            <div class="col-md-12">
                                @await Html.PartialAsync("_BestSellerVendors")
                            </div>
                             <div class="col-md-12">
                                @await Html.PartialAsync("_BestsellersCustomer")
                            </div> 
                        </div>
                    }
                    @await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.DashboardBottom, additionalData = Model })
                </div>
            </div>
        </div>
    </div>
</section>
    <nop-alert asp-alert-id="loadOrderStatisticsAlert" asp-alert-message="@T("Admin.SalesReport.OrderStatistics.Alert.FailedLoad")" />
    <nop-alert asp-alert-id="loadCustomerStatisticsAlert" asp-alert-message="@T("Admin.Reports.Customers.CustomerStatistics.Alert.FailedLoad")" />
