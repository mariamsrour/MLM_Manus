@inject Nop.Services.Common.IGenericAttributeService genericAttributeService
@inject IWorkContext workContext
@{
    const string cardId = "bestsellers-report-category-card";
    const string hideCardAttributeName = "Reports.HideBestsellersBriefReportByQuantityCard";
    var hideCard = await genericAttributeService.GetAttributeAsync<bool>(await workContext.GetCurrentCustomerAsync(), hideCardAttributeName);
}
@using Nop.Services.Orders;
<div class="card card-primary card-outline @if(hideCard){
<text>collapsed-card</text>
}" id="@cardId">
    <div class="card-header with-border">
        <h3 class="card-title">
            <i class="fas fa-star"></i>
            @*             @T("Admin.Reports.Sales.BestSellers.ByQuantity")

            *@
            Top Customers
        </h3>
        <div class="card-tools float-right">
            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                @if (hideCard)
                {
                    <text><i class="fas fa-plus"></i></text>
                }
                else
                {
                    <text><i class="fas fa-minus"></i></text>
                }
            </button>
        </div>
    </div>
                <div class="card-body">
                    <nop-doc-reference asp-string-resource="@T("Admin.Documentation.Reference.Reports", Docs.Reports + Utm.OnAdmin)" />
                    @{
                        var Model = new CustomerReportsSearchModel();
                    }
            @await Html.PartialAsync("Table", new DataTablesModel
               {

                   Name = "best-customers-numberoforders-grid",
                   UrlRead = new DataUrl("ReportBestCustomersByNumberOfOrdersList", "Report", null),
                   SearchButtonId = "search-best-customers-numberoforders-grid",
                   Length = Model.BestCustomersByNumberOfOrders.PageSize,
                   LengthMenu = Model.BestCustomersByNumberOfOrders.AvailablePageSizes,
                   Filters = new List<FilterParameter>
                        {
                            new FilterParameter(nameof(Model.BestCustomersByNumberOfOrders.OrderBy), (int)OrderByEnum.OrderByQuantity),
                             },
                   ColumnCollection = new List<ColumnProperty>
                        {
                            new ColumnProperty(nameof(BestCustomersReportModel.Rank))
                        {
                        Title = "Rank"
                        },
                            new ColumnProperty(nameof(BestCustomersReportModel.CustomerName))
                            {
                                Title = T("Admin.Reports.Customers.BestBy.Fields.Customer").Text
                            },
                            new ColumnProperty(nameof(BestCustomersReportModel.OrderTotal))
                            {
                                Title = T("Admin.Reports.Customers.BestBy.Fields.OrderTotal").Text
                            },
                            new ColumnProperty(nameof(BestCustomersReportModel.OrderCount))
                            {
                                Title = T("Admin.Reports.Customers.BestBy.Fields.OrderCount").Text
                            },
                            new ColumnProperty(nameof(BestCustomersReportModel.CustomerId))
                            {
                                Title = T("Admin.Common.View").Text,
                                Width = "100",
                                ClassName =  NopColumnClassDefaults.Button,
                                Render = new RenderButtonView(new DataUrl("~/Admin/Customer/Edit/"))
                            }
                        }
               })
                </div>

</div>