@model List<Nop.Web.Models.Common.AddressModel>
@using Nop.Core
@using Nop.Services.Customers;

@inject IWorkContext workContext
@inject ICustomerService customerService

@{

    var isLoggedIn = await customerService.IsRegisteredAsync(await workContext.GetCurrentCustomerAsync());

}
@using Nop.Core
@inject IWorkContext workContext

@{
    var supportRtl = (await workContext.GetWorkingLanguageAsync()).Rtl;

    if (supportRtl)
    {
        NopHtml.AppendCssFileParts("~/Themes/MLM_2/Content/css/map.rtl.css");

    }
    else
    {
        NopHtml.AppendCssFileParts("~/Themes/MLM_2/Content/css/map.css");

    }
}



<div class="root333">
    <section class="map-marker1">
        <input id="header-mapSearchInput" class="map-search-box form-control" type="text" placeholder="Search location..." />
        <div id="header-map" style="height: 400px;"></div>
    </section>
    <header class="background12">
        <div class="heading-1-welcome-please-si-wrapper">
            <h2 class="heading-17">Add your location</h2>
        </div>
        <button onclick="$('.user-adds').css('display','none');">
            <img class="vuesaxlinearclose-circle-icon7"
            loading="lazy"
            alt=""
            src="images/map/vuesaxlinearclosecircle1.svg" />
        </button>

    </header>
    <section class="frame-section">
        <div class="frame-wrapper16">
            <div class="currently-selected-123-al-olay-wrapper">
                <div class="currently-selected-123-container1">
                    <p class="currently-selected1">Currently selected</p>
                    <p class="al-olaya-district1" id="header-selected-location-string">
                        123 Al Olaya District, King Fahd Road
                    </p>
                </div>
            </div>
        </div>
        <div class="search-area-street-or-buildin-parent">
            <div class="search-area-street">Search Area, Street Or Building</div>
            <div class="confirmation-button-wrapper">
                <div class="confirmation-button">
                    @*      <button class="back-wrapper">
                        <b class="back">Back</b>
                    </button> *@
                    <button class="yes-pick-this-location-wrapper" onclick="selectAdd()">
                        <b class="yes-pick-this">Yes, Pick this location</b>
                    </button>
                </div>
            </div>
        </div>
    </section>

    @if (isLoggedIn)
    {

        <section class="adds">
            @if (Model.Count() > 0)
            {
                foreach (var item in Model)
                {
                    <div class="add">
                        <div class="add-title">
                            @item.Address1, @item.City , @item.CountryName
                        </div>
                        <button class="select-add" onclick="selectAdd('@item.City', '@item.CountryName')"> Select </button>
                    </div>
                }
            }
            else
            {
                <div class="add">
                    <div class="add-title">
                        Add Default Address
                    </div>
                    <a class="select-add" href="/customer-addresses"> My Addresses </a>
                </div>
            }

        </section>
    }

    </div>
<script>

        let map1, marker1, geocoder1;
        function loadGoogleHeaderMapsScript() {
    if (typeof google !== 'undefined' && google.maps) {
        waitForMapContainerThenInit();
        return;
    }

    const script = document.createElement('script');
    script.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyB5FFqO7vdYzlxL9sTU15G-O7BnU2Or7Ak&libraries=places&callback=initMap1";
    script.async = true;
    script.defer = true;
    document.body.appendChild(script);


    // Declare global callback
    window.waitForMapContainerThenInit = function () {
        const checkExist = setInterval(function () {
            if (document.getElementById("header-map")) {
                clearInterval(checkExist);
                initMap1();
            }
        }, 100); // Check every 100ms
    };
    }


    // Ensure initMap is global
    window.initMap1 = function () {
        debugger;
        geocoder1 = new google.maps.Geocoder();
         var slat1 = sessionStorage.getItem("Latitude");
        var slng1 = sessionStorage.getItem("Longitude");
        var fallbackLocation = { lat: 24.7136, lng: 46.6753 }
        if(slat1 && slng1){
          fallbackLocation = { lat: parseFloat(slat1), lng: parseFloat(slng1) }; // Riyadh

        } else {
         fallbackLocation = { lat: 24.7136, lng: 46.6753 }; // Riyadh

        }



        map1 = new google.maps.Map(document.getElementById("header-map"), {
            center: fallbackLocation,
            zoom: 6
        });
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function (position) {
                    const currentLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    map1.setCenter(currentLocation);
                    map1.setZoom(14);
                    setmarker1AndSave(currentLocation);
                },
                function () {
                    map1.setCenter(fallbackLocation);
                    map1.setZoom(10);
                    setmarker1AndSave(fallbackLocation);
                }
            );
        } else {
            map1.setCenter(fallbackLocation);
            map1.setZoom(10);
            setmarker1AndSave(fallbackLocation);
        }

        const input = document.getElementById("header-mapSearchInput");
        const autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo("bounds", map1);

        autocomplete.addListener("place_changed", function () {
            const place = autocomplete.getPlace();
            if (!place.geometry) return;

            map1.setCenter(place.geometry.location);
            map1.setZoom(16);
            setmarker1AndSave(place.geometry.location);
        });

        map1.addListener("click", function (e) {
            setmarker1AndSave(e.latLng);
        });
    }

        function setmarker1AndSave(latlng) {
        // Ensure latlng is a google.maps.LatLng object
        if (!(latlng instanceof google.maps.LatLng)) {
            latlng = new google.maps.LatLng(latlng.lat, latlng.lng);
        }

        // Set or update marker1
        if (!marker1) {
            marker1 = new google.maps.Marker({
                position: latlng,
                map: map1,
                draggable: true
            });
        } else {
            marker1.setPosition(latlng);
        }

        map1.panTo(latlng);

        // Save coordinates to hidden fields
        // $('#Latitude').val(latlng.lat());
        // $('#Longitude').val(latlng.lng());
        // $('#Coordinates').val(latlng.lat() +','+ latlng.lng());

          sessionStorage.setItem("Latitude", latlng.lat());
            sessionStorage.setItem("Longitude", latlng.lng());
        


        // Reverse geocode to get address
        geocoder1.geocode({ location: latlng }, function (results, status) {
            if (status === "OK" && results[0]) {
                // $('#SelectedAddress').val(results[0].formatted_address);
                $('#header-selected-location-string').html(results[0].formatted_address);


                let city = "", country = "";
                const address = results[0];
                console.log(results)
            address.address_components.forEach(component => {
                 if (
        component.types.includes("locality") ||
        component.types.includes("administrative_area_level_2") ||
        component.types.includes("administrative_area_level_1")
    ) {
        if (!city) city = component.long_name; // first match wins
    }
                if (component.types.includes("country")) country = component.long_name;
            });

            // Save to window (or hidden inputs if you prefer)
            window.selectedCity = city;
            window.selectedCountry = country;
            sessionStorage.setItem("City", city);
            sessionStorage.setItem("Country", country);
            sessionStorage.setItem("Address", results[0].formatted_address);
                         $(".riyadh-sau").html(city + " - " +country );

            } else {
                // $('#SelectedAddress').val('');
                $('#header-selected-location-string').html('');
            }
        });
    }

    // Call when DOM ready
    $(document).ready(function () {

        loadGoogleHeaderMapsScript();
    });
</script>