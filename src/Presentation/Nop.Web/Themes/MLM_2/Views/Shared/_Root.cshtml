@using Nop.Core
@using Nop.Services.Configuration
@inject ISettingService settingService
@inject IStoreContext storeContext

@{
    Layout = "_Root.Head";

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;
    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var actionName = Url.ActionContext.RouteData.Values["action"].ToString();

    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase);
    var isCatalogPage = (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase)
                        || controllerName.Equals("product", StringComparison.InvariantCultureIgnoreCase))

                        && actionName.Equals("category", StringComparison.InvariantCultureIgnoreCase)
                        || actionName.Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase)
                        || actionName.Equals("manufacturerall", StringComparison.InvariantCultureIgnoreCase)
                        || actionName.Equals("vendor", StringComparison.InvariantCultureIgnoreCase)
                        || actionName.Equals("vendorall", StringComparison.InvariantCultureIgnoreCase)
                        || actionName.Equals("productsbytag", StringComparison.InvariantCultureIgnoreCase)
                        || actionName.Equals("newproducts", StringComparison.InvariantCultureIgnoreCase)
                        || actionName.Equals("recentlyviewedproducts", StringComparison.InvariantCultureIgnoreCase);
    var isProductPage = controllerName.Equals("product", StringComparison.InvariantCultureIgnoreCase)
                        && actionName.Equals("productdetails", StringComparison.InvariantCultureIgnoreCase);

    var HomePageLayout = string.Empty;
    var CatalogPageLayout = string.Empty;
    var ProductPageLayout = string.Empty;

    if (isHomePage) {
        HomePageLayout = await settingService.GetSettingByKeyAsync("AvenueThemeSettings.HomePageLayout", "with-slider", storeId, true);
    }
    if (isCatalogPage)
    {
        CatalogPageLayout = await settingService.GetSettingByKeyAsync("AvenueThemeSettings.CatalogPageLayout", "two-columns", storeId, true);
    }
    if (isProductPage)
    {
        ProductPageLayout = await settingService.GetSettingByKeyAsync("AvenueThemeSettings.ProductPageLayout", "standard-gallery", storeId, true);
    }
}

@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@{ await Html.RenderPartialAsync("_JavaScriptDisabledWarning"); }

<div class="master-wrapper-page @HomePageLayout @CatalogPageLayout @ProductPageLayout">
    @{
        await Html.RenderPartialAsync("_Notifications");
    }

    <script asp-location="Footer">
        var localized_data = {
            AjaxCartFailure: "@T("AjaxCart.Failure")"
        };
        AjaxCart.init(false, '.cart-qty', '.wishlist-qty', '#flyout-cart', localized_data);
    </script>
    <div class="overlayOffCanvas"></div>
    <div class="header-wrapper">
        @{ await Html.RenderPartialAsync("_Header"); }
    </div>
    @if (isHomePage && HomePageLayout == "with-slider")
    {
        @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_main_slider" })
    }
    @if (isHomePage && HomePageLayout == "no-slider")
    {
        @await Component.InvokeAsync("HomepageCategories")
    }
    @await RenderSectionAsync("Breadcrumb", false)
    <div class="master-wrapper-content" id="main" role="main">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ContentBefore })
        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
    @await Component.InvokeAsync(typeof(FooterViewComponent))
</div>
@await Component.InvokeAsync(typeof(EuCookieLawViewComponent))
@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })
<script src="~/lib_npm/fine-uploader/jquery.fine-uploader/jquery.fine-uploader.min.js" asp-exclude-from-bundle="true" asp-location="Footer"></script>

<div id="global-loader" style="display: none; position: fixed; z-index: 9999; background-color: rgba(255,255,255,0.7); top: 0; left: 0; height: 100%; width: 100%; text-align: center;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <img src="~/images/ezgif.com-resize.gif" alt="Loading..." />
    </div>
</div>
<script asp-exclude-from-bundle="true" asp-location="Footer">
    $(document).on({
           ajaxStart: function () {
               $("#global-loader").show();
           },
           ajaxStop: function () {
               $("#global-loader").hide();
           }
       });

       // Optional: Show loader on page navigation
       $(window).on('beforeunload', function () {
           $("#global-loader").show();
       });
</script>


