@model CatalogProductsModel
@using Nop.Core
@inject IWorkContext workContext

@{
    var supportRtl = (await workContext.GetWorkingLanguageAsync()).Rtl;

    if (supportRtl)
    {
        NopHtml.AppendCssFileParts("~/Themes/MLM_2/Content/css/_catalogSelectors.rtl.css");

    } else
    {
        NopHtml.AppendCssFileParts("~/Themes/MLM_2/Content/css/_catalogSelectors.css");

    }
}
@if (Model.Products.Count <= 0 &&
    !Model.PriceRangeFilter.Enabled &&
    !Model.SpecificationFilter.Enabled &&
    !Model.ManufacturerFilter.Enabled)
{
    return;
}

@{
    var reviews = Context.Request.Query["reviews"].ToString()?? string.Empty ;
}

<div class="product-selectors">
    @*view mode*@
    @if (Model.AllowCustomersToSelectPageSize)
    {
        <div class="product-page-size">
            <div class="size-container">
                <span>@T("Catalog.PageSize")</span>
                @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { aria_label = T("Catalog.PageSize.Label") })
            </div>
          
            <span class="per">@T("Catalog.PageSize.PerPage")</span>
        </div>
        <script asp-location="Footer">
            $(function() {
                var $pageSizeEl = $('#products-pagesize');
                $pageSizeEl.on('change', function () {
                    CatalogProducts.getProducts();
                });

                $(CatalogProducts).on('before', function (e) {

                    e.payload.urlBuilder
                        .addParameter('pagesize', $pageSizeEl.val())
                    var reviews = '@reviews';
                    if(reviews) {
                        e.payload.urlBuilder.addParameter('reviews', reviews);
                    } 

                });
            });
        </script>
    }

    <div class="product-page-size">
        <div class="size-container">
            @Html.DropDownList("products-country", Model.AvailableCountries, new { @class ="", aria_label = T("Catalog.PageSize.Label") })
        </div>
    </div>
    <script asp-location="Footer">
        $(function() {
            var $countryEl = $('#products-country');
            $countryEl.on('change', function () {
                CatalogProducts.getProducts();
            });

            $(CatalogProducts).on('before', function (e) {
                e.payload.urlBuilder
                    .addParameter('country', $countryEl.val())
        var reviews = '@reviews';
                           if(reviews) {
                               e.payload.urlBuilder.addParameter('reviews', reviews);
                           }
            });
        });
    </script>

    <div class="product-page-size">
        <div class="size-container">
            @Html.DropDownList("products-city", Model.AvailableCities, new { aria_label = T("Catalog.PageSize.Label") })
        </div>
    </div>
    <script asp-location="Footer">
        $(function() {
            var $cityEl = $('#products-city');
            $cityEl.on('change', function () {
                CatalogProducts.getProducts();
            });

            $(CatalogProducts).on('before', function (e) {
                e.payload.urlBuilder
                    .addParameter('city', $cityEl.val())
                    var reviews = '@reviews';
                    if(reviews) {
                        e.payload.urlBuilder.addParameter('reviews', reviews);
                    }

            });
        });
    </script>

       @if (Model.AllowProductSorting)
    {
        <div class="product-sorting">
            <span>@T("Catalog.OrderBy")</span>
            <div class="size-container">

            @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { aria_label = T("Catalog.OrderBy.Label") })
            </div>
        </div>
        <script asp-location="Footer">
            $(function() {
                var $orderByEl = $('#products-orderby');
                $orderByEl.on('change', function () {
                    CatalogProducts.getProducts();
                });

                $(CatalogProducts).on('before', function (e) {
                    e.payload.urlBuilder
                        .addParameter('orderby', $orderByEl.val())
                       var reviews = '@reviews';
                    if(reviews) {
                        e.payload.urlBuilder.addParameter('reviews', reviews);
                    }
                });
            });
        </script>

    }
    @if (Model.AllowProductViewModeChanging)
    {
        <div class="product-viewmode">
            @if (Model.AvailableViewModes.Count > 1)
            {
                var gridMode = Model.AvailableViewModes[0];
                var listMode = Model.AvailableViewModes[1];

                <a class="viewmode-icon grid @if (gridMode.Selected){<text>selected</text>}" data-viewmode="@gridMode.Value" title="@gridMode.Text" tabindex="0" aria-role="button" href="#">@gridMode.Text</a>
                <a class="viewmode-icon list @if (listMode.Selected){<text>selected</text>}" data-viewmode="@listMode.Value" title="@listMode.Text" tabindex="0" aria-role="button" href="#">@listMode.Text</a>
            }
        </div>
        <script asp-location="Footer">
            $(function() {
                var $viewModeEls = $('[data-viewmode]');
                $viewModeEls.on('click', function () {
                    if (!$(this).hasClass('selected')) {
                        $viewModeEls.toggleClass('selected');
                        CatalogProducts.getProducts();
                    }
                    return false;
                });

                $(CatalogProducts).on('before', function (e) {
                    var $viewModeEl = $('[data-viewmode].selected');
                    if ($viewModeEl) {
                        e.payload.urlBuilder
                            .addParameter('viewmode', $viewModeEl.data('viewmode'))
                           var reviews = '@reviews';
                    if(reviews) {
                        e.payload.urlBuilder.addParameter('reviews', reviews);
                    }
                    }
                });
            });
        </script>
    }

 

</div>