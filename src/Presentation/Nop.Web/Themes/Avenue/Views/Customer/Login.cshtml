@model LoginModel

@using Nop.Core
@using Nop.Core.Domain.Customers

@inject IWebHelper webHelper

@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register", new { returnUrl = this.Context.Request.Query["returnUrl"] }, webHelper.GetCurrentRequestProtocol());
}

<div class="page login-page">
   
    @await Html.PartialAsync("_ExternalAuthentication.Errors")
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LoginTop, additionalData = Model })
        <div class="customer-blocks">
            <div class="customer-block login-block">
                <form class="wrapper" asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
                    <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>
                    @* <div class="title">
                        <strong>@T("Account.Login.ReturningCustomer")</strong>
                    </div> *@
                    <div class="page-title">
                        <h1>@T("Account.Login")</h1>
                    </div>

                    <div class="form-fields">
                        @if (Model.UsernamesEnabled)
                        {
                            <div class="inputs">
                                <label asp-for="Username" asp-postfix=":" class="input-name"></label>
                                <input asp-for="Username" placeholder="@T("Account.Login.Fields.UserName")" class="login-input username" />
                                <span asp-validation-for="Username"></span>
                            </div>
                        }
                        else
                        {
                            <div class="inputs">
                                <label asp-for="Email" asp-postfix=":" class="input-name"></label>
                                <input asp-for="Email" placeholder="@T("Account.Login.Fields.Email")" class="login-input email" />
                                <span asp-validation-for="Email"></span>
                            </div>
                        }
                        <div class="inputs">
                            <label asp-for="Password" asp-postfix=":" class="input-name"></label>
                            <input asp-for="Password" placeholder="@T("Account.Login.Fields.Password")" class="login-input password" />
                            <span asp-validation-for="Password"></span>
                        </div>
                        <div class="inputs reversed">
                            <input asp-for="RememberMe" />
                            <label asp-for="RememberMe" class="remember"></label>
                            <a asp-route="PasswordRecovery" class="forgot-password">@T("Account.Login.ForgotPassword")</a>
                        </div>
                        @if (Model.DisplayCaptcha)
                        {
                            <nop-captcha />
                        }
                    </div>
                    <div class="buttons">
                        <button type="submit" class="button-1 login-button">@T("Account.Login.LoginButton")</button>
                    </div>
                </form>
            </div>
          @*   @if (Model.RegistrationType == UserRegistrationType.Disabled)
            {
			    <div class="customer-block register-block">
	                <div class="wrapper">
	                    <div class="title">
	                        @T("Account.Register")
	                    </div>
	                    <div class="text">
	                        @T("Account.Register.Result.Disabled")
	                    </div>
	                </div>
				</div>
            }
            else if (Model.CheckoutAsGuest)
            {
                <div class="customer-block checkout-as-guest">
                    <div class="wrapper">
                        <div class="title">
                            <strong>@T("Account.Login.CheckoutAsGuestOrRegister")</strong>
                        </div>
                        <div class="text">
                            @await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "CheckoutAsGuestOrRegister" })
                        </div>
                        <div class="buttons">
                            <button type="button" class="button-1 guest-button" onclick="location.href='@Url.RouteUrl("Checkout")'">@T("Account.Login.CheckoutAsGuest")</button>
                        	<button type="button" class="button-1 register-button" onclick="location.href='@registerUrl'">@T("Account.Register")</button>
                        </div>
                    </div>
                </div>
            } *@
           @*  else
            {
                <div class="customer-block register-block">
                    <div class="wrapper">
                        <div class="title">
                            <strong>@T("Account.Login.NewCustomer")</strong>
                        </div>
                        <div class="text">
                            @T("Account.Login.NewCustomerText")
                        </div>
                        <div class="buttons">
                            <button type="button" class="button-1 register-button" onclick="location.href='@registerUrl'">@T("Account.Register")</button>
                        </div>
                    </div>
                </div>
            } *@
        </div>
       @*  @{
            var externalMethodsAvailable = await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication");
        }
        @if (!String.IsNullOrEmpty(await externalMethodsAvailable.RenderHtmlContentAsync()))
        {
            <div class="customer-block external-authentication">
                <div class="wrapper">
                    @await Component.InvokeAsync(typeof(ExternalMethodsViewComponent), "ExternalAuthentication")
                </div>
            </div>
        }
        @await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "LoginRegistrationInfo" }) *@
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LoginBottom, additionalData = Model })
    </div>
</div>