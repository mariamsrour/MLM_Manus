@model ProductDetailsModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Seo
@using Nop.Services.Configuration
@using Nop.Services.Html
@using Microsoft.AspNetCore.Html;

@inject IHtmlFormatter htmlFormatter
@inject ISettingService settingService
@inject IStoreContext storeContext
@inject IWebHelper webHelper
@inject SeoSettings seoSettings

@{
    Layout = "_ColumnsOne";

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl<Product>(new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }

    var StickyColumn = string.Empty;
    bool isProductOverviewSticky = await settingService.GetSettingByKeyAsync("AvenueThemeSettings.StickyProductDetails", true, storeId, true);

    if ((await settingService.GetSettingByKeyAsync("AvenueThemeSettings.ProductPageLayout", "standard-gallery", storeId, true)).Equals("extended-gallery"))
    {
        if (isProductOverviewSticky)
        {
            StickyColumn = "sticky";
        }
    }
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
                <script type="application/ld+json">
                    @Html.Raw(Model.JsonLd)
                </script>
            }
            <div data-productid="@Model.Id">
                <div class="product-essential">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    <div class="gallery">
                        @{
                            IHtmlContent cloudZoom = null;
                            if (((await settingService.GetSettingByKeyAsync("AvenueThemeSettings.ProductPageLayout", "standard-gallery", storeId, true)).Equals("standard-gallery")))
                            {
                                cloudZoom = await Component.InvokeAsync("Widget", new { widgetZone = "sevenspikes_cloud_zoom", additionalData = Model });
                            }
                        }
                        @if (cloudZoom != null && !String.IsNullOrEmpty(await cloudZoom.RenderHtmlContentAsync()))
                        {
                            @cloudZoom
                            @await Html.PartialAsync("_ProductDetailsVideos", Model)
                        }
                        else
                        {
                            @await Html.PartialAsync("_ProductDetailsPictures", Model)
                            @await Html.PartialAsync("_ProductDetailsVideos", Model)
                        }
                    </div>
                    <div class="overview @StickyColumn">

                        <div class="middle">
                            <!--manufacturers-->
                            @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                            <div class="product-title">
                                <span>@Model.Name</span>
                                @await Component.InvokeAsync("Widget", new { widgetZone = "productname_inside", additionalData = Model.Id })
                            </div>
                            @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                            <div class="product-name">
                                <!--price-->
                                @{
                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceTop, additionalData = Model })
                                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceBottom, additionalData = Model })
                                }
                            </div>
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })

                            @await Html.PartialAsync("_Discontinued", Model)
                          
                        
                          @*   <!--SKU, MAN, GTIN, vendor-->
                            @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model) *@
                       
                            <!--attributes-->
                            @{
                                var dataDictAttributes = new ViewDataDictionary(ViewData);
                                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                @await Html.PartialAsync("_ProductAttributes", Model, dataDictAttributes)
                            }
                            @if (!string.IsNullOrEmpty(Model.ShortDescription))
                            {
                                <div class="short-description">
                                    @Html.Raw(Model.ShortDescription)
                                </div>
                            }
                            <!--gift card-->
                            @{
                                var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                                @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                            }
                            @await Html.PartialAsync("_Availability", Model)
                            <!--rental info-->
                            @{
                                var dataDictRental = new ViewDataDictionary(ViewData);
                                dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                                @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                            }
                            <!--price breaks-->
                            @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                            <div class="cart-buttons-wrapper">
                                <!--add to cart-->
                                @{
                                    var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                }
                                <!--wishlist, compare, email a friend-->
                                <div class="overview-buttons">
                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                    @* @await Html.PartialAsync("_CompareProductsButton", Model) *@
                                    @{
                                        var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                        dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                        @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                    }
                                    @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                                </div>
                            </div>
                        </div>

                        <div class="right">
                            <!--delivery-->
                            @* @await Html.PartialAsync("_DeliveryInfo", Model) *@
                            <!--sample download-->
                            @await Html.PartialAsync("_DownloadSample", Model)
                          
                         
                            <!--estimate-shipping-->
                            @* @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping) *@
                            <div class="shipping-method">
                            <label class="select-shipping">@T("Products.ShippingMethod"):</label>
                            <select  asp-for="SelectedShippingMethod" 
                                    asp-items="@Model.AvailableShippingMethods"
                                    class="shipping-method-dropdown">
                            </select>
                            <script>
                                     document.querySelector('#SelectedShippingMethod').addEventListener('change', function() {
                                          document.querySelector('#addtocart_@(Model.Id)_SelectedShippingMethod').value = this.value;
                                    });

                                   // addtocart_27_SelectedShippingMethod
                                </script>

                            </div>
                            <!--  perks section -->
                            <div class="perks">
                                <h3>PERKS</h3>
                                <div class="perk">
                                    <div class="perk-title">
                                        <img src="images/Frame 93.png" />
                                        <h4 class="title">
                                                Free & Fast Delivery
                                        </h4>
                                        <div class="product-estimate-shipping toggle-icon"><i class="arrow-down"></i></div>
                                    </div>
                                   
                                    <ul class="perk-details">
                                        <li>No-Cost, Rapid Delivery</li>
                                        <li>2-3 Day Shipping</li>
                                        <li>Free For All Customers</li>
                                    </ul>
                                </div>
                                <div class="perk">
                                    <div class="perk-title">
                                        <img src="images/Frame 93 (1).png" />
                                        <h4 class="title">
                                            Free Returns
                                        </h4>
                                        <div class="product-estimate-shipping toggle-icon"><i class="arrow-down"></i></div>
                                    </div>
                                   
                                    <ul class="perk-details">
                                        <li>Easy 90-Day Returns</li>
                                        <li>Refund If Package Is Lost</li>
                                        <li>Refund If No Delivery Within 30 Days</li>
                                    </ul>
                                </div>
                                <div class="perk">
                                    <div class="perk-title">
                                        <img src="images/Frame 93 (2).png" />
                                        <h4 class="title">
                                            Secured Payment
                                        </h4>
                                        <div class="product-estimate-shipping toggle-icon"><i class="arrow-down"></i></div>
                                    </div>
                                    <ul class="perk-details">
                                        <li>Secure Payment Gateway</li>
                                        <li>Fraud Protection</li>
                                        <li>Verified Payment</li>
                                    </ul>
                                </div>
                            </div>
<script>
                                                                    document.querySelectorAll('.perk-title').forEach(title => {
                                    title.addEventListener('click', function () {
                                        const details = this.nextElementSibling;
                                        const isActive = this.classList.contains('active');

                                        // Toggle active class
                                        this.classList.toggle('active');

                                        // Show or hide details
                                        if (isActive) {
                                            details.style.display = 'none';
                                        } else {
                                            details.style.display = 'block';
                                        }
                                    });
                                });

</script>
                            <!--Ali Express-->
                           @*  <div class="shipping--item--F04J6q9"><img class="shipping--icon--vAVr7jZ" src="images/package.png"><div class="shipping--content--ulA3urO"><div class="shipping--title--sZAnuQw"><span style="font-weight: bold; ">Fast delivery</span></div><div class="shipping--descList--godpH8F"><div class="shipping--descItem--pqpWeD5"><img class="shipping--descIcon--dGr7zk4" src="images/check.jpg">&nbsp;<div class="shipping--descText--UVpscND">Refund if package lost</div></div><div class="shipping--descItem--pqpWeD5"><img class="shipping--descIcon--dGr7zk4" src="images/check.jpg">&nbsp;<div class="shipping--descText--UVpscND">Refund if items damaged </div></div><div class="shipping--descItem--pqpWeD5"><img class="shipping--descIcon--dGr7zk4" src="images/check.jpg">&nbsp;<div class="shipping--descText--UVpscND">Refund if no delivery in 30 days</div></div></div></div></div>                        
                            <div class="shipping--item--F04J6q9"><img class="shipping--icon--vAVr7jZ" src="images/return.png"><div class="shipping--content--ulA3urO"><div class="shipping--title--sZAnuQw"><span style="font-weight: bold; ">Free returns within 90 days</span></div></div></div>
                            <div class="shipping--item--F04J6q9"><img class="shipping--icon--vAVr7jZ" src="images/security.jpg"><div class="shipping--content--ulA3urO"><div class="shipping--title--sZAnuQw"><span style="font-weight: bold; ">Security &amp; Privacy</span></div><div class="shipping--descList--godpH8F"><div class="shipping--descItem--pqpWeD5"><div class="shipping--descText--UVpscND">Safe payments: We do not share your personal details with any third parties without your consent.</div></div><div class="shipping--descItem--pqpWeD5"><div class="shipping--descText--UVpscND">Secure personal details: We protect your privacy and keep your personal details safe and secure.</div></div></div></div></div>
                             *@
                      
                            <!--availability-->
                            @await Html.PartialAsync("_ShareButton", Model)
                        </div>

                      
                    
                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                    </div>
					@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                </div>
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                <div class="product-collateral">
                    @if (!string.IsNullOrEmpty(Model.FullDescription))
                    {
                        <div class="full-description">
                            @Html.Raw(Model.FullDescription)
                        </div>
                    }
                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
@*                     @await Html.PartialAsync("_ProductTags", Model.ProductTags)
 *@                </div>
            </div>
        </form>
        <!--product reviews-->
        @if (Model.ProductReviewOverview.AllowCustomerReviews)
        {
            @await Html.PartialAsync("_ProductReviews", Model.ProductReviews)
        }
        @await Component.InvokeAsync(typeof(ProductsAlsoPurchasedViewComponent), new { productId = Model.Id })
        @await Component.InvokeAsync(typeof(RelatedProductsViewComponent), new { productId = Model.Id })
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>
