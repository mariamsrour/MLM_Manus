@model TopMenuModel

@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Topics
@using Nop.Web.Models.Catalog

@{
    var isRtl = await Html.ShouldUseRtlThemeAsync();
}

<input type="hidden" value="@isRtl.ToString().ToLowerInvariant()" id="isRtlEnabled" />

@functions {
    async Task CategoryLine(TopMenuModel.CategoryLineModel lineModel)
    {
        var subCategories = lineModel.ResponsiveMobileMenu ?
        //responsive (all categories)
        lineModel.Category.SubCategories :
        //standard design (only categories with "IncludeInTopMenu")
        lineModel.Category.SubCategories.Where(x => x.IncludeInTopMenu).ToList();

        var hasSubList = String.Empty;
        var hasSubCategories = String.Empty;
        @if (subCategories.Count > 0)
        {
            hasSubList = "has-sublist";
            hasSubCategories = "with-subcategories";
        }

        <li class="@hasSubList">
            @if (lineModel.Category.NumberOfProducts.HasValue)
            {
                <a class="@hasSubCategories" href="@(Url.RouteUrl<Category>(new { SeName = lineModel.Category.SeName }))">@lineModel.Category.Name
                    <span class="number">@T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)</span></a>
            }
            else
            {
                <a class="@hasSubCategories" href="@(Url.RouteUrl<Category>(new { SeName = lineModel.Category.SeName }))">@lineModel.Category.Name</a>
            }
            @if (subCategories.Count > 0)
            {
                // <button class="trigger plus-button"></button>
                // <div class="mega-menu-wrap">
                //     <div class="responsive-nav-head back-button">
                //         <span class="text"><button>@T("SevenSpikes.Themes.Common.BackSublist")</button></span>
                //     </div>
                //     <div class="mega-menu">
                //         <ul class="sublist">
                //             @foreach (var subCategory in subCategories)
                //             {
                //                 <li class="mega-menu-item">
                //                     <a href="@(Url.RouteUrl<Category>(new { SeName = subCategory.SeName }))">@subCategory.Name</a>
                //                     <!-- Add promotional images or featured products here -->
                //                     <img src="/path/to/subcategory-image.jpg" alt="@subCategory.Name" class="subcategory-image">
                //                 </li>
                //             }
                //         </ul>
                //     </div>
                // </div>
                <button class="trigger plus-button"></button>
                <div class="sublist-wrap">
                    <div class="responsive-nav-head back-button">
                        <span class="text"><button>@T("SevenSpikes.Themes.Common.BackSublist")</button></span>
                    </div>
                    <ul class="sublist">
                        <li class="back-button">
                            <span>@T("SevenSpikes.Themes.Common.BackSublist")</span>
                        </li>
                        @foreach (var subCategory in subCategories)
                        {
                            var categoryLineModel = new TopMenuModel.CategoryLineModel
                            {
                                Category = subCategory,
                                Level = lineModel.Level + 1,
                                ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                            };
                            await CategoryLine(categoryLineModel);
                        }
                    </ul>
                </div>
            }
        </li>
    }
}

<ul class="top-menu">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuBefore, additionalData = Model })
    @if (Model.DisplayHomepageMenuItem)
    {
        <li><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
    }
    @{
        var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
    }
    @foreach (var category in rootCategories)
    {
        var categoryLineModel = new TopMenuModel.CategoryLineModel
        {
            Category = category
        };
        await CategoryLine(categoryLineModel);
    }
    @foreach (var topic in Model.Topics)
    {
        <li><a href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a></li>
    }
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
    {
        <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    }
    @if (Model.DisplayProductSearchMenuItem)
    {
        <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
    }
    @if (Model.DisplayCustomerInfoMenuItem)
    {
        <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
    {
        <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    }
    @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
    {
        <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    }
    @if (Model.DisplayContactUsMenuItem)
    {
        <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    }
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuAfter, additionalData = Model })
</ul>