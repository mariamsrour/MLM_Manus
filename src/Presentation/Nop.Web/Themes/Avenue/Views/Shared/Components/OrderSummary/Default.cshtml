@model ShoppingCartModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Media
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax

@inject IViewComponentSelector viewComponentSelector
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject MediaSettings mediaSettings
@inject OrderSettings orderSettings

<div class="order-summary-content">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore, additionalData = Model })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="cart-wrapper">
                <div class="table-wrapper">
                    <table class="cart desktop-cart">
                        <colgroup>
                            <col width="1" class="footable-element" />
                            @if (Model.IsEditable)
                            {
                                <col width="1" />
                            }
                           @*  @if (Model.ShowSku)
                            {
                                <col class="sku" width="1" />
                            } *@
                            @if (Model.ShowProductImages)
                            {
                                <col width="1" />
                            }
                            <col />
                           @*  @if (Model.ShowVendorName)
                            {
                                <col width="1" />
                            } *@
                            <col width="1" />
                            <col width="2" />
                            <col width="1" />
                        </colgroup>
                        <thead>
                            <tr class="cart-header-row">
                                <th class="footable-element">
                                    <span class="item-count">#</span>
                                </th>
                                @if (Model.IsEditable)
                                {
                                    <th class="remove-from-cart" data-hide="w410, w480, w580">
                                        @T("ShoppingCart.Remove")
                                    </th>
                                }
                               @*  @if (Model.ShowSku)
                                {
                                    <th class="sku" data-hide="w410, w480, w580, w768, w980, w1000">
                                        @T("ShoppingCart.SKU")
                                    </th>
                                } *@
                                @if (Model.ShowProductImages)
                                {
                                    <th class="product-picture">
                                        @T("ShoppingCart.Image")
                                    </th>
                                }
                                <th class="product">
                                    @T("ShoppingCart.Product(s)")
                                </th>
                               @*  @if (Model.ShowVendorName)
                                {
                                    <th class="vendor" data-hide="w410, w480, w580, w768, w980">
                                        @T("ShoppingCart.VendorName")
                                    </th>
                                } *@
                                <th class="unit-price" data-hide="w410, w480, w580, w768">
                                    @T("ShoppingCart.UnitPrice")
                                </th>
                                <th class="quantity" data-hide="w410, w480, w580, w768">
                                    @T("ShoppingCart.Quantity")
                                </th>
                                <th class="subtotal" data-hide="w410, w480, w580">
                                    @T("ShoppingCart.ItemTotal")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{var counter = 0;}
                            @foreach (var item in Model.Items)
                            {
                                counter++;
                                <tr class="cart-item-row">
                                    <td class="footable-element">
                                        <span class="item-count">@counter</span>
                                    </td>
                                    @if (Model.IsEditable)
                                    {
                                        <td class="remove-from-cart">
                                            @if (item.DisableRemoval)
                                            {
                                                <text>&nbsp;</text>
                                            }
                                            else
                                            {
                                                <input type="checkbox" name="removefromcart" id="removefromcart@(item.Id)" value="@(item.Id)" aria-label="@T("ShoppingCart.Remove")" />
                                            	<button type="button" name="updatecart" class="remove-btn" onclick="$('#removefromcart@(item.Id)').attr('checked', true); $('#updatecart').trigger('click')"></button>
                                            }
                                        </td>
                                    }
                                    @* @if (Model.ShowSku)
                                    {
                                        <td class="sku">
                                            <label class="td-title">@T("ShoppingCart.SKU"):</label>
                                            <span class="sku-number">@item.Sku</span>
                                        </td>
                                    } *@
                                    @if (Model.ShowProductImages)
                                    {
                                        <td class="product-picture">
                                            <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))">
                                                @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
                                                {
                                                    @await Component.InvokeAsync("LazyLoadImage", new (string Key, string Value)[]
                                                    {
                                                        ("src", item.Picture.ImageUrl),
                                                        ("alt", item.Picture.AlternateText),
                                                        ("title", item.Picture.Title)
                                                    })
                                                }
                                                else
                                                {
                                                    <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" width="@mediaSettings.DefaultImageQuality" />
                                                }
                                            </a>
                                        </td>
                                    }
                                    <td class="product">
                                        <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))" class="product-name">@item.ProductName</a>
                                        @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                        {
                                            <div class="attributes">
                                                @Html.Raw(item.AttributeInfo)
                                            </div>
                                        }
                                        
                                        @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                        {
                                            <div class="recurring-info">
                                                @Html.Raw(item.RecurringInfo)
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(item.RentalInfo))
                                        {
                                            <div class="rental-info">
                                                @Html.Raw(item.RentalInfo)
                                            </div>
                                        }

                                        @if(item.selectedShippingMethodID != 0){
                                          

                                            <div class="selectedShipping">
                                                @item.selectedShippingMethod
                                            </div>
                                        }
                            
                                        @if (Model.IsEditable && item.AllowItemEditing)
                                        {
                                        	var editCartItemUrl = Url.RouteUrl<Product>(new { SeName = item.ProductSeName }, webHelper.GetCurrentRequestProtocol());
                                            editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                                            <div class="edit-item">
                                                <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                            </div>
                                        }
                                        @if (item.Warnings.Count > 0)
                                        {
                                            <div class="message-error">
                                                <ul>
                                                    @foreach (var warning in item.Warnings)
                                                    {
                                                        <li>@Html.Raw(warning)</li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    </td>
                                  @*   @if (Model.ShowVendorName)
                                    {
                                        <td class="vendor">
                                            <label class="td-title">@T("ShoppingCart.VendorName"):</label>
                                            <span class="vendor-name">@item.VendorName</span>
                                        </td>
                                    } *@
                                    <td class="unit-price">
                                        <label class="td-title">@T("ShoppingCart.UnitPrice"):</label>
                                        <span class="product-unit-price">@item.UnitPrice</span>
                                    </td>
                                    <td class="quantity">
                                        <label class="td-title" for="itemquantity@(item.Id)">@T("ShoppingCart.Quantity"):</label>
                                        @if (Model.IsEditable)
                                        {
                                           @*  if (item.AllowedQuantities.Count > 0)
                                            {
                                                <select name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" class="qty-dropdown" onchange="$('#updatecart').trigger('click');">
                                                    @foreach (var qty in item.AllowedQuantities)
                                                    {
                                                        <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                    }
                                                </select>
                                            }
                                            else
                                            {
                                                <input name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" aria-label="@T("ShoppingCart.Quantity")" onchange="$('#updatecart').trigger('click')" />
                                            } *@

                                            <div class="qty-wrapper">
                                                <button type="button" class="qty-btn qty-minus" id="qty-minus-@item.ProductId">-</button>
                                                <input name="itemquantity@(item.Id)" id="itemquantity_@(item.Id)" class="qty-input" type="text" aria-label=@T("Products.Qty.AriaLabel") value="@(item.Quantity)" />
                                                <button type="button" class="qty-btn qty-plus" id="qty-plus-@item.ProductId">+</button>
                                            </div>

                                            <script asp-location="Footer">
                                                $(function () {
                                                                       function checkQuantity() {
                                                    var quantityInput = $("#itemquantity_@item.Id");
                                                    var minusButton = $("#qty-minus-@item.ProductId");
                                                    var currentVal = parseInt(quantityInput.val());

                                                    // Disable the minus button if quantity equals 1
                                                    if (currentVal <= 1) {
                                                        minusButton.prop("disabled", true);
                                                    } else {
                                                        minusButton.prop("disabled", false);
                                                    }
                                                    $('#updatecart').trigger('click');

                                                }

                                                // Run the check initially
                                                @* checkQuantity(); *@
                                                    // Handling + and - buttons
                                                    $("#qty-minus-@item.ProductId").on("click", function () {
                                                        var quantityInput = $("#itemquantity_@item.Id");
                                                        var currentVal = parseInt(quantityInput.val());
                                                        if (currentVal > 1) {
                                                            quantityInput.val(currentVal - 1).trigger('change');
                                                                        checkQuantity();

                                                        }
                                                    });

                                                    $("#qty-plus-@item.ProductId").on("click", function () {
                                                        var quantityInput = $("#itemquantity_@item.Id");
                                                        var currentVal = parseInt(quantityInput.val());
                                                        quantityInput.val(currentVal + 1).trigger('change');
                                                                    checkQuantity();

                                                    });

                                                    // Handling manual input change
                                                    $("#itemquantity_@item.ProductId").on("input propertychange paste", function () {
                                                        var data = {
                                                            productId: @item.ProductId,
                                                            quantity: $('#itemquantity_@item.Id').val()
                                                        };
                                                                    checkQuantity();

                                                        @* $(document).trigger({ type: "product_quantity_changed", changedData: data }); *@
                                                    });
                                                });
                                            </script>

                                        }
                                        else
                                        {
                                            <span class="product-quantity">@item.Quantity</span>
                                        }
                                    </td>
                                    <td class="subtotal">
                                        <label class="td-title">@T("ShoppingCart.ItemTotal"):</label>
                                        <span class="product-subtotal">@item.SubTotal</span>
                                        @if (!string.IsNullOrEmpty(item.Discount))
                                        {
                                            <div class="discount">
                                                @T("ShoppingCart.ItemYouSave", item.Discount)
                                            </div>
                                            if (item.MaximumDiscountedQty.HasValue)
                                            {
                                                <div class="discount-info">
                                                    @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                                </div>
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>


                    <table class="cart mobile-cart">
                   
                        <tbody>
                            @{
                                var counter_m = 0;
                            }
                            @foreach (var item in Model.Items)
                            {
                                counter_m++;
                                <tr class="cart-item-row">
                                    <td style="display:flex">
                                        
                                        @* @if (Model.ShowSku)
                                    {
                                        <td class="sku">
                                            <label class="td-title">@T("ShoppingCart.SKU"):</label>
                                            <span class="sku-number">@item.Sku</span>
                                        </td>
                                    } *@
                                        <div style="width:30%">
                                            @if (Model.ShowProductImages)
                                            {
                                                <div class="product-picture">
                                                    <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))">
                                                        @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
                                                        {
                                                            @await Component.InvokeAsync("LazyLoadImage", new (string Key, string Value)[]
                                                                     {
                                            ("src", item.Picture.ImageUrl),
                                            ("alt", item.Picture.AlternateText),
                                            ("title", item.Picture.Title)
                                                                     })
                                                        }
                                                        else
                                                        {
                                                            <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" width="@mediaSettings.DefaultImageQuality" />
                                                        }
                                                    </a>
                                                </div>
                                            }
                                        </div>

                                        <div style="width:70%">
                                            @if (Model.IsEditable)
                                            {
                                                <div class="remove-from-cart">
                                                    @if (item.DisableRemoval)
                                                    {
                                                        <text>&nbsp;</text>
                                                    }
                                                    else
                                                    {
                                                        <input type="checkbox" name="removefromcart" id="removefromcart@(item.Id)" value="@(item.Id)" aria-label="@T("ShoppingCart.Remove")" />
                                                        <button type="button" name="updatecart" class="remove-btn" onclick="$('#removefromcart@(item.Id)').attr('checked', true); $('#updatecart').trigger('click')"></button>
                                                    }
                                                </div>
                                            }
                                            <div class="product" style="margin-top:-20px;max-width: 90%;">
                                                
                                                <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))" class="product-name">@item.ProductName</a>
                                                @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                                {
                                                    <div class="attributes">
                                                        @Html.Raw(item.AttributeInfo)
                                                    </div>
                                                }

                                                @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                                {
                                                    <div class="recurring-info">
                                                        @Html.Raw(item.RecurringInfo)
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(item.RentalInfo))
                                                {
                                                    <div class="rental-info">
                                                        @Html.Raw(item.RentalInfo)
                                                    </div>
                                                }

                                                @if (item.selectedShippingMethodID != 0)
                                                {


                                                    <div class="selectedShipping">
                                                        @item.selectedShippingMethod
                                                    </div>
                                                }

                                                @if (Model.IsEditable && item.AllowItemEditing)
                                                {
                                                    var editCartItemUrl = Url.RouteUrl<Product>(new { SeName = item.ProductSeName }, webHelper.GetCurrentRequestProtocol());
                                                    editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                                                    <div class="edit-item">
                                                        <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                                    </div>
                                                }
                                                @if (item.Warnings.Count > 0)
                                                {
                                                    <div class="message-error">
                                                        <ul>
                                                            @foreach (var warning in item.Warnings)
                                                            {
                                                                <li>@Html.Raw(warning)</li>
                                                            }
                                                        </ul>
                                                    </div>
                                                }
                                            </div>

                                            <div class="unit-price">
                                                <label class="td-title">@T("ShoppingCart.UnitPrice"):</label>
                                                <span class="product-unit-price">@item.UnitPrice</span>
                                            </div>
                                            <div class="quantity">
                                                <label class="td-title" for="itemquantity@(item.Id)">@T("ShoppingCart.Quantity"):</label>
                                                @if (Model.IsEditable)
                                                {
                                                    @*  if (item.AllowedQuantities.Count > 0)
                                            {
                                                <select name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" class="qty-dropdown" onchange="$('#updatecart').trigger('click');">
                                                    @foreach (var qty in item.AllowedQuantities)
                                                    {
                                                        <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                    }
                                                </select>
                                            }
                                            else
                                            {
                                                <input name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" aria-label="@T("ShoppingCart.Quantity")" onchange="$('#updatecart').trigger('click')" />
                                            } *@

                                                    <div class="qty-wrapper">
                                                        <button type="button" class="qty-btn qty-minus" id="qty-minus-@item.ProductId">-</button>
                                                        <input name="itemquantity@(item.Id)" id="itemquantity_@(item.Id)" class="qty-input" type="text" aria-label=@T("Products.Qty.AriaLabel") value="@(item.Quantity)" />
                                                        <button type="button" class="qty-btn qty-plus" id="qty-plus-@item.ProductId">+</button>
                                                    </div>

                                                    <script asp-location="Footer">
                                                        $(function () {
                                                                               function checkQuantity() {
                                                            var quantityInput = $("#itemquantity_@item.Id");
                                                            var minusButton = $("#qty-minus-@item.ProductId");
                                                            var currentVal = parseInt(quantityInput.val());

                                                            // Disable the minus button if quantity equals 1
                                                            if (currentVal <= 1) {
                                                                minusButton.prop("disabled", true);
                                                            } else {
                                                                minusButton.prop("disabled", false);
                                                            }
                                                            $('#updatecart').trigger('click');

                                                        }

                                                        // Run the check initially
                                                        @* checkQuantity(); *@
                                                            // Handling + and - buttons
                                                            $("#qty-minus-@item.ProductId").on("click", function () {
                                                                var quantityInput = $("#itemquantity_@item.Id");
                                                                var currentVal = parseInt(quantityInput.val());
                                                                if (currentVal > 1) {
                                                                    quantityInput.val(currentVal - 1).trigger('change');
                                                                                checkQuantity();

                                                                }
                                                            });

                                                            $("#qty-plus-@item.ProductId").on("click", function () {
                                                                var quantityInput = $("#itemquantity_@item.Id");
                                                                var currentVal = parseInt(quantityInput.val());
                                                                quantityInput.val(currentVal + 1).trigger('change');
                                                                            checkQuantity();

                                                            });

                                                            // Handling manual input change
                                                            $("#itemquantity_@item.ProductId").on("input propertychange paste", function () {
                                                                var data = {
                                                                    productId: @item.ProductId,
                                                                    quantity: $('#itemquantity_@item.Id').val()
                                                                };
                                                                            checkQuantity();

                                                        @* $(document).trigger({ type: "product_quantity_changed", changedData: data }); *@
                                                            });
                                                        });
                                                    </script>

                                                }
                                                else
                                                {
                                                    <span class="product-quantity">@item.Quantity</span>
                                                }
                                            </div>
                                            <div class="subtotal">
                                                <label class="td-title">@T("ShoppingCart.ItemTotal"):</label>
                                                <span class="product-subtotal">@item.SubTotal</span>
                                                @if (!string.IsNullOrEmpty(item.Discount))
                                                {
                                                    <div class="discount">
                                                        @T("ShoppingCart.ItemYouSave", item.Discount)
                                                    </div>
                                                    if (item.MaximumDiscountedQty.HasValue)
                                                    {
                                                        <div class="discount-info">
                                                            @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        </div>

                                        <span class=" footable-element item-count">@counter_m</span>
                                   
                                
                                    
                                  
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
                @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
                {
                	var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                @*     <div class="tax-shipping-info">
                    	@T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteTopicUrl("shippinginfo"))
                    </div> *@
                }
                @if (Model.IsEditable)
                {
                    <div class="cart-options">
                        <div class="buttons">
                            <button type="submit" name="updatecart" id="updatecart" class="button-2 update-cart-button" style="display: none;"><span>@T("ShoppingCart.UpdateCart")</span></button>
                            <button type="button" name="clearcart" class="button-2 clear-cart-button"><span>@T("SevenSpikes.Themes.Avenue.ShoppingCart.ClearCart")</span></button>
                            <button type="submit" name="continueshopping" class="button-2 more-shopping-button"><span>@T("ShoppingCart.ContinueShopping")</span></button>
                        </div>
                    </div>
                }
            </div>
            <div class="cart-footer">
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter, additionalData = Model })
                @if (Model.IsEditable)
                {
                    <div class="cart-collaterals">
                        <div class="box deals">
                            <div class="box-title open"><strong>@T("SevenSpikes.Themes.Avenue.ShoppingCart.DiscountsAndVouchers")</strong></div>
                            <div class="box-wrapper active" style="display:block;">
                                @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                                @*                             @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                        *@                           
                                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals, additionalData = Model })
                            </div>
                        </div>
                        <div style="display:none;" class="box estimation">
                            <div class="box-title"><strong>@T("SevenSpikes.Themes.Avenue.EstimateShipping")</strong></div>
                            <div class="box-wrapper">
                                @await Component.InvokeAsync(typeof(ShoppingCartEstimateShippingViewComponent))
                            </div>
                        </div>
                    </div>
                }
                @if (Model.CheckoutAttributes.Count > 0)
                {
                    <div class="attributes-wrapper">
                        @if (Model.IsEditable)
                        {
                            @await Html.PartialAsync("_CheckoutAttributes", Model)
                        }
                        else
                        {
                            @await Component.InvokeAsync(typeof(SelectedCheckoutAttributesViewComponent))
                        }
                    </div>
                }
                <div class="totals">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryTotals, additionalData = Model })
                    @await Component.InvokeAsync(typeof(OrderTotalsViewComponent), new { isEditable = Model.IsEditable })
                    @if (Model.IsEditable)
                    {
                        if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                        {
                            <div class="min-amount-warning">
                                @Model.MinOrderSubtotalWarning
                            </div>
                        }
                    }
                    @if (Model.IsEditable)
                    {
                        if (Model.TermsOfServiceOnShoppingCartPage)
                        {
                            <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                            </div>
                            <div class="terms-of-service">
                                <input id="termsofservice" type="checkbox" name="termsofservice" />
                                <label for="termsofservice">@T("Checkout.TermsOfService.IAccept")</label>
                                @if (Model.TermsOfServicePopup)
                                {
                                    <a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                    <script asp-location="Footer">
                                        $(function() {
                                            $('#read-terms').on('click',
                                                function(e) {
                                                    e.preventDefault();
                                                    displayPopupContentFromUrl(
                                                        '@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
                                                        '@T("Checkout.TermsOfService")');
                                                });
                                        });
                                    </script>
                                }
                                else
                                {
                                	<a class="read" id="read-terms" href="@Url.RouteTopicUrl("conditionsofuse")">@T("Checkout.TermsOfService.Read")</a>
                                }
                            </div>
                        }
                        <div class="checkout-buttons">
                            @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                            {
                                <script asp-location="Footer">
                                    $(function () {
                                        $('#checkout').on('click', function () {
                                            //terms of service
                                            var termOfServiceOk = true;
                                            if ($('#termsofservice').length > 0) {
                                                //terms of service element exists
                                                if (!$('#termsofservice').is(':checked')) {
                                                    $("#terms-of-service-warning-box").dialog();
                                                    termOfServiceOk = false;
                                                } else {
                                                    termOfServiceOk = true;
                                                }
                                            }
                                            return termOfServiceOk;
                                        });
                                    });
                                </script>
                                if (orderSettings.CheckoutDisabled)
                                {
                                    <div class="checkout-disabled">
                                        @T("Checkout.Disabled")
                                    </div>
                                }
                                else
                                {
                                    <button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
                                        @T("Checkout.Button")
                                    </button>
                                }
                            }
                        </div>
                        @if (Model.ButtonPaymentMethodViewComponents.Count > 0)
                        {
                            <div class="addon-buttons">
                                @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                                @foreach (var pm in Model.ButtonPaymentMethodViewComponents)
                                {
                                    @await Component.InvokeAsync(pm)
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </form>
        @if (Model.IsEditable)
        {
            @await Component.InvokeAsync(typeof(CrossSellProductsViewComponent))
        }
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }


    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter, additionalData = Model })
</div>
