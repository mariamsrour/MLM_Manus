@model ProductOverviewModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration
@using Nop.Services.Catalog

@inject CatalogSettings catalogSettings
@inject ISettingService settingService
@inject IStoreContext storeContext
@inject IViewComponentSelector viewComponentSelector
@inject IWorkContext workContext

@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;
    var lazyLoadImages = await settingService.GetSettingByKeyAsync("AvenueThemeSettings.LazyLoadImages", false, storeId, true);
}

<div class="product-item" data-productid="@Model.Id">
    <div class="picture">
        @if (Model.PictureModels.Count > 1)
        {
            <div class="swiper" id="swiper-@Model.Id" dir="@Html.GetUIDirection(!await Html.ShouldUseRtlThemeAsync())">
                <div class="swiper-wrapper">
                    @foreach (var picture in Model.PictureModels)
                    {
                        <a class="swiper-slide" href="@(Url.RouteUrl<Product>(new { SeName = Model.SeName }))" title="@picture.Title">
                            @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
                            {
                                @await Component.InvokeAsync("LazyLoadImage", new (string Key, string Value)[]
                                {
                                    ("src", picture.ImageUrl),
                                    ("alt", picture.AlternateText),
                                    ("title", picture.Title)
                                })
                            }
                            else
                            {
                                <img class="picture-img" alt="@picture.AlternateText" src="@picture.ImageUrl" title="@picture.Title" />
                            }
                        </a>
                    }
                </div>
                <div class="swiper-pagination"></div>
            </div>
            <script asp-location="Footer">
                new Swiper('#swiper-@(Model.Id)', {
                    pagination: {
                        clickable: true,
                        el: '.swiper-pagination',
                    },
                });
            </script>
        }
        else
        {
            var picture = Model.PictureModels.FirstOrDefault();
            <a href="@(Url.RouteUrl<Product>(new { SeName = Model.SeName }))" title="@picture?.Title">
                @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
                {
                    @await Component.InvokeAsync("LazyLoadImage", new (string Key, string Value)[]
                    {
                        ("src", picture.ImageUrl),
                        ("alt", picture.AlternateText),
                        ("title", picture.Title)
                    })
                }
                else
                {
                    <img class="picture-img" alt="@picture?.AlternateText" src="@picture?.ImageUrl" title="@picture?.Title" />
                }
            </a>
        }
    </div>
    <div class="product-box-info" >
        <h2 class="product-title" title="@Model.Name">
            <a class="custom-title" title="@Model.Name" href="@(Url.RouteUrl<Product>(new {SeName = Model.SeName }))">@Model.Name</a>
        </h2>
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            var ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            <div class="rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                <div class="rating-icons">
                    <div class="rating" style="width: @(ratingPercent)%"></div>
                </div>
            </div>
        }


              <div class="product-colors">
                @if (Model.ProductAttributes != null && Model.ProductAttributes.Any())
                    {
                        foreach (var attribute in Model.ProductAttributes)
                        {
                            if (attribute.Name.ToLower().Contains("color"))
                            {
                        var controlId = $"{NopCatalogDefaults.ProductAttributePrefix}{attribute.Id}";

                        <dd>
                            <ul data-attr="@(attribute.Id)" class="option-list attribute-squares color-squares" id="color-squares-@(attribute.Id)">

                                @foreach (var attributeValue in attribute.Values)
                                {
                                var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                attributeValue.Name :
                                T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment, string.Empty).Text;
                                <li data-attr-value="@attributeValue.Id" @(attributeValue.IsPreSelected ? @Html.Raw(" class=\"selected-value\"") : null)>
                                    <label for="@(controlId)_@(attributeValue.Id)">
                                        <span class="attribute-square-container" title="@attributeName">
                                            <span class="attribute-square" style="background-color:@(attributeValue.ColorSquaresRgb);">&nbsp;</span>
                                        </span>
                                        <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" data-attr-value="@attributeValue.Name" checked="@attributeValue.IsPreSelected"
                                        @Html.Raw($"onclick=\"showHideRadioQuantity('{controlId}')\"") />
                                        @*                                                 @(attribute.Values.Any(value => value.CustomerEntersQty) ? : null)
 *@                                            </label>
                                    <div class="tooltip-container">
                                        <div class="not-available-text">@T("Products.ProductAttributes.NotAvailable")</div>
                                    </div>
                                </li>
                                }
                            </ul>
                        </dd>
                            }
                        }
                    }
                </div>
       
        <div class="description" @(catalogSettings.ShowShortDescriptionOnCatalogPages ? "" : "data-short-description=none")>
            <p>@Html.Raw(Model.ShortDescription)</p>
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
        <div class="prices">
            @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
            {
                <span class="price old-price">@Model.ProductPrice.OldPrice</span>
            }
            <span class="price actual-price">@Model.ProductPrice.Price</span>
            @if (Model.ProductPrice.DisplayTaxShippingInfo)
            {
            	var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <span class="tax-shipping-info">
                	@T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteTopicUrl("shippinginfo"))
                </span>
            }
            @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
            {
                <div class="base-price-pangv">
                    @Model.ProductPrice.BasePricePAngV
                </div>
            }
        </div>
        <div class="tags">
            @if (Model.ProductTags.Count > 0)
            {
                @await Html.PartialAsync("_ProductTags", Model.ProductTags)
            }
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
    </div>
    <div class="buttons">
        <a class="dummy-link" href="@(Url.RouteUrl<Product>(new {SeName = Model.SeName }))" title="@Model.Name"></a> @*links "buttons" area to product pages*@
        <div class="wrap">
            @if (!Model.ProductPrice.DisableAddToCompareListButton)
            {
                <button type="button" class="button-2 add-to-compare-list-button" title="@T("ShoppingCart.AddToCompareList")" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">@T("ShoppingCart.AddToCompareList")</button>
            }
            @if (!Model.ProductPrice.DisableWishlistButton)
            {
                <button type="button" class="button-2 add-to-wishlist-button" title="@T("ShoppingCart.AddToWishlist")" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;">@T("ShoppingCart.AddToWishlist")</button>
            }
            @if (!Model.ProductPrice.DisableBuyButton)
            {
                var addToCartText = T("ShoppingCart.AddToCart").Text;
                if (Model.ProductPrice.IsRental)
                {
                    addToCartText = T("ShoppingCart.Rent").Text;
                }
                if (Model.ProductPrice.AvailableForPreOrder)
                {
                    addToCartText = T("ShoppingCart.PreOrder").Text;
                }
                <button type="button" class="button-2 product-box-add-to-cart-button" title="@(addToCartText)" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;">@(addToCartText)</button>
            }
        </div>
    </div>
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
</div>
