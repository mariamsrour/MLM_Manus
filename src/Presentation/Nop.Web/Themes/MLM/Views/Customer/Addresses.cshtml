@model CustomerAddressListModel
@{
    Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-account-page");
    NopHtml.AppendPageCssClassParts("html-address-list-page");
}
@section left
{
    @await Component.InvokeAsync(typeof(CustomerNavigationViewComponent), new { selectedTabId = CustomerNavigationEnum.Addresses })
}
<div class="page account-page customer-info-page">
    @*    <div class="page-title">
        <h1>@T("Account.MyAccount") - @T("Account.CustomerAddresses")</h1>
    </div> *@
    <div class="page-body login-custom custom-register">
        <h3 class="strong-login1">
            @T("Account.CustomerAddresses")
        </h3>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CustomerAddressesTop, additionalData = Model })
        @if (Model.Addresses.Count > 0)
        {
            <div class="address-list">
                @for (var i = 0; i < Model.Addresses.Count; i++)
                {
                    var address = Model.Addresses[i];

                    <div class="add-wrapper">
                        <img class="vuesaxlinearlocation-icon" alt="" src="images/vuesaxlinearlocation.svg">
                        <div class="title-wrapper">
                            <div class="add-title">
                                @address.FirstName @address.LastName | @address.Email
                            </div>
                            <div class="address-wrapper">
                                @foreach (var item in address.AddressFields.Reverse())
                                {
                                    <span>
                                        @item.Value

                                        @if (!string.IsNullOrEmpty(item.Value) && item.Key != address.AddressFields.Reverse().Last().Key)
                                        {
                                            <span>, </span>
                                        }
                                    </span>
                                }
                            </div>
                        </div>
                        <div class="buttons">
                            <button type="button" class=" edit-address-button" onclick="location.href = '@(Url.RouteUrl("CustomerAddressEdit", new {addressId = address.Id}))'"></button>

                            <button type="button" class=" delete-address-button" onclick="deletecustomeraddress(@(address.Id))"></button>
                        </div>
                    </div>
                }
            </div>

            <script asp-location="Footer">
                function deletecustomeraddress(addressId) {
                    if (confirm('@T("Common.AreYouSure")')) {
                        var postData = {
                            addressId: addressId
                        };
                        addAntiForgeryToken(postData);

                        $.ajax({
                            cache: false,
                            type: "POST",
                            url: "@Url.RouteUrl("CustomerAddressDelete")",
                            data: postData,
                            dataType: "json",
                            success: function (data, textStatus, jqXHR) {
                                location.href = data.redirect;
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert('Failed to delete');
                            }
                        });
                    }
                }
            </script>
        }
        else
        {
            <img src="~/images/Empty.png" alt="@T("Wishlist.CartIsEmpty")" />

            <div class="no-data" style="margin:20px;">
                @T("Account.CustomerAddresses.NoAddresses")
            </div>

        }
        <button class="register-button" type="button" onclick="location.href='@Url.RouteUrl("CustomerAddressAdd")'" >
            <div class="register-wrapper">
                <b class="register">@T("Common.AddNew")</b>
            </div>
        </button>

        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CustomerAddressesBottom, additionalData = Model })
    </div>
</div>